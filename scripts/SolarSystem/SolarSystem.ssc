/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Strings = /** @class */ (function () {
    function Strings() {
        this._german = {
            anErrorOccured: "Ein Fehler ist aufgetreten",
            january: "Januar",
            february: "Februar",
            march: "MÃ¤rz",
            april: "April",
            may: "Mai",
            june: "Juni",
            july: "Juli",
            august: "August",
            september: "September",
            october: "Oktober",
            november: "November",
            december: "Dezember",
            dateAndTime: "Datum und Zeit",
            winterSolstice: "Wintersonnenwende",
            summerSolstice: "Sommersonnenwende",
            sun: "Sonne"
        };
        this._english = {
            anErrorOccured: "An error occured",
            january: "January",
            february: "February",
            march: "March",
            april: "April",
            may: "May",
            june: "June",
            july: "July",
            august: "August",
            september: "September",
            october: "October",
            november: "November",
            december: "December",
            dateAndTime: "Date and Time",
            winterSolstice: "Winter solstice",
            summerSolstice: "Sommer solstice",
            sun: "Sun"
        };
    }
    Strings.prototype.verify = function () {
        // todo: Check all langauge versions and panik if one of them is missing a string.
    };
    Strings.prototype.getLocalizedStrings = function (loc) {
        if (loc === void 0) { loc = ""; }
        // This function is using the localized name of the sun in order to try to determine the UI culture.
        var lang;
        if (loc) {
            lang = loc;
            core.debug('Forcing language to "' + lang + '"');
        }
        else {
            lang = core.getAppLanguage();
            core.debug('App language is "' + lang + '"');
        }
        var s;
        // Germany, Austria and Switzerland get the german strings. 		
        if (lang == "de_DE" || lang == "de_AT" || lang == "de_CH") {
            s = this._german;
        }
        // default is english
        else {
            s = this._english;
        }
        // Add support functions
        s.monthFromInt = function (m) {
            if (m < 1 || m > 12)
                return "invalid month";
            var monthNames = [s.january, s.february, s.march,
                s.april, s.may, s.june,
                s.july, s.august, s.september,
                s.october, s.november, s.december];
            return monthNames[m - 1];
        };
        return s;
    };
    return Strings;
}());
exports.Strings = Strings;


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// Author: Ingo Berg
// Version: 1.0
// License: GPL v3.0
// Name: Tour of the solar system
// Description: A tour through the solar system
var Helper_1 = __webpack_require__(2);
var Trace_1 = __webpack_require__(3);
var BulletList_1 = __webpack_require__(4);
var Strings_1 = __webpack_require__(0);
var Strings_2 = __webpack_require__(5);
// Set up localized strings
var strings = new Strings_2.Strings().getLocalizedStrings("en");
var sharedStrings = new Strings_1.Strings().getLocalizedStrings("en");
function setup() {
    // Wait to work around #491 
    // (https://github.com/Stellarium/stellarium/issues?q=is%3Aissue+is%3Aclosed)
    core.wait(2);
    SolarSystem.setFlagPlanets(true);
    SolarSystem.setMoonScale(1);
    SolarSystem.setFlagMoonScale(false);
    SolarSystem.setFontSize(25);
    SolarSystem.setFlagLabels(false);
    StelSkyDrawer.setAbsoluteStarScale(0.9);
    StelSkyDrawer.setRelativeStarScale(1.0);
    StarMgr.setFontSize(20);
    StarMgr.setLabelsAmount(0);
    StelMovementMgr.setAutoMoveDuration(5);
    ConstellationMgr.setFlagLines(false);
    ConstellationMgr.setFlagLabels(false);
    ConstellationMgr.setArtIntensity(0.3);
    ConstellationMgr.setFlagArt(false);
    ConstellationMgr.setFlagBoundaries(false);
    ConstellationMgr.setConstellationLineThickness(2);
    ConstellationMgr.setFontSize(32);
    ConstellationMgr.setFlagConstellationPick(true);
    ConstellationMgr.setFlagIsolateSelected(true);
    SporadicMeteorMgr.setFlagShow(true);
    SporadicMeteorMgr.setZHR(20000);
    core.setGuiVisible(false);
    core.setSkyCulture("western");
    core.setMilkyWayVisible(true);
    core.setMilkyWayIntensity(1);
    LandscapeMgr.setFlagAtmosphere(false);
    LandscapeMgr.setFlagLandscape(false);
    LabelMgr.deleteAllLabels();
}
function intro(delayTime) {
    try {
        Helper_1.Helper.storeState(StarMgr);
        Helper_1.Helper.storeState(SolarSystem);
        SolarSystem.setFlagLabels(false);
        //      core.setDate("2492-05-06T20:00:00", "utc");
        core.setTimeRate(500);
        var baseY = 200;
        Helper_1.Helper.showTitle(strings.title, strings.subTitle, 800, baseY);
        core.moveToAltAzi(10, 270);
        var baseScale = 0.4;
        var imgHeight;
        var margin = 50;
        var x = 800;
        ScreenImageMgr.createScreenImage("imgSun", "./SolarSystem.Assets/sun.png", 0, 0, 0.7);
        var planets = ["mercury", "venus", "earth", "mars"];
        var scale = [4879.4 / 12756.32, 12103.6 / 12756.32, 1, 6792.4 / 12756.32];
        for (var i = 0; i < planets.length; ++i) {
            var planet = planets[i];
            ScreenImageMgr.createScreenImage(planet, "./SolarSystem.Assets/" + planet + ".png", 0, 0, baseScale * scale[i], false);
            imgHeight = ScreenImageMgr.getImageWidth(planet);
            //core.debug("imageHeight=" + imgHeight + "; x=" + x + "; y=" + (baseY - imgHeight / 2));
            ScreenImageMgr.setImageXY(planet, x, baseY + 400 - imgHeight / 2);
            ScreenImageMgr.showImage(planet, true);
            x += imgHeight + margin;
        }
        core.wait(delayTime);
        core.setTimeRate(1);
        LabelMgr.deleteAllLabels();
        ScreenImageMgr.deleteAllImages();
    }
    finally {
        Helper_1.Helper.restoreState(StarMgr);
        Helper_1.Helper.restoreState(SolarSystem);
    }
}
var PlanetaryObserver = /** @class */ (function () {
    function PlanetaryObserver(name, id, long, lat, date) {
        this._trace = new Trace_1.Trace();
        // Field of view for planet closeup
        this._fovCloseupFromSun = 0.1;
        // Field of view for watching the planet race along the ecliptic
        this._fovEcliptic = 40;
        this._timeRateDay = 0;
        if (id == null)
            throw new Error("PlanetaryObserver.constructor: id is null or empty!");
        if (name == null)
            throw new Error("PlanetaryObserver.constructor: name is null or empty!");
        this._long = long;
        this._lat = lat;
        this._date = date;
        this._name = name;
        this._id = id;
        this._fovEcliptic = 40;
        var cached = LandscapeMgr.precacheLandscape('Sun');
        if (!cached)
            throw new Error('Precaching landscape "Sun" failed');
    }
    Object.defineProperty(PlanetaryObserver.prototype, "landscape", {
        get: function () {
            return this._landscape;
        },
        set: function (value) {
            this._landscape = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlanetaryObserver.prototype, "dateSunsetStart", {
        get: function () {
            return this._dateSunsetStart;
        },
        set: function (value) {
            this._dateSunsetStart = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlanetaryObserver.prototype, "dateSunsetEnd", {
        get: function () {
            return this._dateSunsetEnd;
        },
        set: function (value) {
            this._dateSunsetEnd = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlanetaryObserver.prototype, "timeRateDay", {
        get: function () {
            return this._timeRateDay;
        },
        set: function (value) {
            this._timeRateDay = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlanetaryObserver.prototype, "trace", {
        get: function () {
            return this._trace;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlanetaryObserver.prototype, "orbitalPeriod", {
        get: function () {
            return this._orbitalPeriod;
        },
        set: function (value) {
            this._orbitalPeriod = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlanetaryObserver.prototype, "siderialPeriod", {
        get: function () {
            return this._siderialPeriod;
        },
        set: function (value) {
            this._siderialPeriod = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlanetaryObserver.prototype, "name", {
        get: function () {
            return this._name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlanetaryObserver.prototype, "long", {
        get: function () {
            return this._long;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlanetaryObserver.prototype, "lat", {
        get: function () {
            return this._lat;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlanetaryObserver.prototype, "date", {
        get: function () {
            return this._date;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlanetaryObserver.prototype, "id", {
        get: function () {
            return this._id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlanetaryObserver.prototype, "fovSun", {
        get: function () {
            return this._fovCloseupFromSun;
        },
        set: function (value) {
            this._fovCloseupFromSun = value;
        },
        enumerable: true,
        configurable: true
    });
    PlanetaryObserver.prototype.watchSurface = function (startDate, endDate, timeRate) {
        if (startDate == null)
            throw new Error("date is null!");
        if (timeRate == null)
            throw new Error("timeRate is null!");
        core.debug("Setting up " + this._name + " surface observer (" + startDate + ")");
        core.setDate(startDate, "utc");
        core.wait(0.1);
        core.setTimeRate(timeRate);
    };
    PlanetaryObserver.prototype.select = function () {
        core.debug('Selecting object "' + this.id + '" (' + this.name + ')');
        core.selectObjectByName(this.id, false);
        core.setSelectedObjectInfo("None"); // "ShortInfo", "AllInfo", "None"
    };
    PlanetaryObserver.prototype.watchSeasons = function () {
        try {
            var observerName = "Solar " + this.name + " Observer";
            core.debug("Setting up " + observerName);
            core.setDate(this.date, "utc");
            StarMgr.setFlagStars(false);
            var lbTitle = LabelMgr.labelScreen(this.name + strings.asSeenFromSun, 50, 50, true, 40, "#66ccff");
            var lbTime = LabelMgr.labelScreen(strings.timeLapse + ": 1 s = " + core.getTimeRate() / 3600 + " h", 50, 100, true, 25, "#66ccff");
            // Show ecliptic and poles
            // GridLinesMgr.setFlagEclipticJ2000Line(true);
            // GridLinesMgr.setFlagEclipticJ2000Poles(true);
            // observer location is the suns north pole. This will eliminate the
            // effects of suns rotation
            core.setObserverLocation(0, 90, 0, 0, observerName, "Sun");
            LandscapeMgr.setFlagFog(false);
            LandscapeMgr.setFlagAtmosphere(false);
            LandscapeMgr.setFlagLandscape(false);
            this.select();
            StelMovementMgr.autoZoomIn(0);
            StelMovementMgr.zoomTo(this.fovSun, 0);
        }
        finally {
            StarMgr.setFlagStars(true);
            LabelMgr.deleteLabel(lbTitle);
            LabelMgr.deleteLabel(lbTime);
        }
        core.setTimeRate(0);
        core.setDate(this.date, "utc");
        core.debug("Watching seasons of " + this.name);
    };
    return PlanetaryObserver;
}());
var MercuryObserver = /** @class */ (function (_super) {
    __extends(MercuryObserver, _super);
    function MercuryObserver(long, lat, date) {
        var _this = _super.call(this, strings.mercury, "Mercury", long, lat, date) || this;
        _this.orbitalPeriod = 87.969;
        _this.siderialPeriod = 58.646;
        _this.fovSun = 0.008;
        _this.landscape = "Moon";
        // For simulating a "day" on mercury
        _this.timeRateDay = 4 * 86400;
        _this.dateSunsetStart = "2018-10-26T13:01:13";
        _this.dateSunsetEnd = "2019-01-21T12:00:00";
        return _this;
    }
    MercuryObserver.prototype.watchSurface = function (startDate, endDate, timeRate) {
        try {
            var lbTitle = LabelMgr.labelScreen(strings.aDayOnMercury, 50, 50, true, 40, "#66ccff");
            core.selectObjectByName("");
            _super.prototype.watchSurface.call(this, startDate, endDate, timeRate);
            LandscapeMgr.setCurrentLandscapeName(this.landscape);
            LandscapeMgr.setFlagAtmosphere(false);
            LandscapeMgr.setFlagFog(false);
            LandscapeMgr.setFlagLandscape(true);
            LandscapeMgr.setFlagLandscapeUseMinimalBrightness(true);
            LandscapeMgr.setDefaultMinimalBrightness(0.05);
            StelMovementMgr.zoomTo(90, 0);
            core.setObserverLocation(this.long, this.lat, 425, 0, "Surface " + this.name + " Observer", this.id);
            core.moveToAltAzi(40, 180);
            core.wait(1);
            do {
                var simulationTime = core.getDate();
                core.wait(.1);
            } while (simulationTime < endDate);
        }
        finally {
            LabelMgr.deleteLabel(lbTitle);
        }
    };
    // Watch Season on mercury
    MercuryObserver.prototype.watchSeasons = function () {
        try {
            _super.prototype.watchSeasons.call(this);
            var bl = new BulletList_1.BulletList();
            var orbitx = core.getScreenWidth() - 300;
            var orbity = core.getScreenHeight() / 2;
            var lbTitle = LabelMgr.labelScreen(strings.mercuryAsSeenFromSun, 50, 50, true, 40, "#66ccff");
            var lbSunMarker = LabelMgr.labelScreen("+", orbitx, orbity, true, 15, "#ffff66");
            var lbSunCaption = LabelMgr.labelScreen(sharedStrings.sun, orbitx + 20, orbity, true, 15, "#ffff66");
            var lbMercuryCaption = 0;
            var dt = 0.3;
            for (var p = 0; p < this.orbitalPeriod; p += dt) {
                core.setDate("+" + dt + " day");
                core.wait(0.05);
                var info = core.getSelectedObjectInfo();
                if (info == null)
                    continue;
                var ra = info["ra"];
                var dst = info["distance"];
                var rad = 400;
                var x = Math.sin(ra * Math.PI / 180) * rad * dst;
                var y = Math.cos(ra * Math.PI / 180) * rad * dst;
                this.trace.add(orbitx + x, orbity + y);
                if (lbMercuryCaption != 0) {
                    LabelMgr.deleteLabel(lbMercuryCaption);
                }
                else {
                    lbMercuryCaption = LabelMgr.labelScreen(this.name, orbitx + x + 20, orbity + y, true, 15, "#ffff66");
                }
            }
            // Display bullet list
            bl.setPos(50, 300);
            bl.add(strings.mercuryInfo1, 2);
            bl.add(strings.mercuryInfo2, 2);
            bl.add(strings.mercuryInfo3, 2);
            bl.add(strings.mercuryInfo4, 2);
            bl.add(strings.mercuryInfo5, 2);
            bl.show();
            core.wait(5);
        }
        finally {
            bl.clear();
            LabelMgr.deleteLabel(lbTitle);
            LabelMgr.deleteLabel(lbSunMarker);
            LabelMgr.deleteLabel(lbSunCaption);
            LabelMgr.deleteLabel(lbMercuryCaption);
            this.trace.clear();
        }
    };
    return MercuryObserver;
}(PlanetaryObserver));
var VenusObserver = /** @class */ (function (_super) {
    __extends(VenusObserver, _super);
    function VenusObserver(long, lat, date) {
        var _this = _super.call(this, strings.venus, "Venus", long, lat, date) || this;
        _this.orbitalPeriod = 224.701;
        _this.siderialPeriod = -243.025;
        _this.fovSun = 0.008;
        _this.landscape = "Saturn";
        _this.timeRateDay = 100;
        _this.dateSunsetStart = "2018-10-26T13:01:13";
        _this.dateSunsetEnd = "2019-01-21T12:00:00";
        return _this;
    }
    // public watchSurface(startDate : string, endDate : string, timeRate : number) : void {
    //     super.watchSurface(startDate, endDate, timeRate);
    //     LandscapeMgr.setCurrentLandscapeName("Saturn");
    //     LandscapeMgr.setFlagAtmosphere(true);
    //     LandscapeMgr.setFlagFog(true);
    //     LandscapeMgr.setFlagLandscape(true);
    //     core.setDate(this.date, "utc");
    //     core.setObserverLocation(this.long, this.lat, 425, 0, "Venus Observer", "Venus");
    // }
    VenusObserver.prototype.watchSurface = function (startDate, endDate, timeRate) {
        try {
            var lbTitle = LabelMgr.labelScreen(strings.aDayOnMercury, 50, 50, true, 40, "#66ccff");
            core.selectObjectByName("");
            _super.prototype.watchSurface.call(this, startDate, endDate, timeRate);
            LandscapeMgr.setCurrentLandscapeName(this.landscape);
            LandscapeMgr.setFlagAtmosphere(false);
            LandscapeMgr.setFlagFog(false);
            LandscapeMgr.setFlagLandscape(true);
            LandscapeMgr.setFlagLandscapeUseMinimalBrightness(true);
            LandscapeMgr.setDefaultMinimalBrightness(0.05);
            StelMovementMgr.zoomTo(90, 0);
            core.setObserverLocation(this.long, this.lat, 425, 0, "Surface " + this.name + " Observer", this.id);
            core.moveToAltAzi(40, 180);
            core.wait(1);
            do {
                var simulationTime = core.getDate();
                core.wait(.1);
            } while (simulationTime < endDate);
        }
        finally {
            LabelMgr.deleteLabel(lbTitle);
        }
    };
    // Watch Season on mercury
    VenusObserver.prototype.watchSeasons = function () {
        try {
            _super.prototype.watchSeasons.call(this);
            var bl = new BulletList_1.BulletList();
            var orbitx = core.getScreenWidth() - 300;
            var orbity = core.getScreenHeight() / 2;
            var lbTitle = LabelMgr.labelScreen(strings.venusAsSeenFromSun, 50, 50, true, 40, "#66ccff");
            var lbSunMarker = LabelMgr.labelScreen("+", orbitx, orbity, true, 15, "#ffff66");
            var lbSunCaption = LabelMgr.labelScreen(sharedStrings.sun, orbitx + 20, orbity, true, 15, "#ffff66");
            var lbMercuryCaption = 0;
            var dt = 0.6;
            for (var p = 0; p < this.orbitalPeriod; p += dt) {
                core.setDate("+" + dt + " day");
                core.wait(0.05);
                var info = core.getSelectedObjectInfo();
                if (info == null)
                    continue;
                var ra = info["ra"];
                var dst = info["distance"];
                var rad = 200;
                var x = Math.sin(ra * Math.PI / 180) * rad * dst;
                var y = Math.cos(ra * Math.PI / 180) * rad * dst;
                //core.debug("ra=" + ra + "; dst=" + dst);
                this.trace.add(orbitx + x, orbity + y);
                if (lbMercuryCaption != 0) {
                    LabelMgr.deleteLabel(lbMercuryCaption);
                }
                else {
                    lbMercuryCaption = LabelMgr.labelScreen(this.name, orbitx + x + 20, orbity + y, true, 15, "#ffff66");
                }
            }
            // Display bullet list
            bl.setPos(50, 300);
            bl.add(strings.mercuryInfo1, 2);
            bl.add(strings.mercuryInfo2, 2);
            bl.add(strings.mercuryInfo3, 2);
            bl.add(strings.mercuryInfo4, 2);
            bl.add(strings.mercuryInfo5, 2);
            bl.show();
            core.wait(5);
        }
        finally {
            bl.clear();
            LabelMgr.deleteLabel(lbTitle);
            LabelMgr.deleteLabel(lbSunMarker);
            LabelMgr.deleteLabel(lbSunCaption);
            LabelMgr.deleteLabel(lbMercuryCaption);
            this.trace.clear();
        }
    };
    return VenusObserver;
}(PlanetaryObserver));
var EarthObserver = /** @class */ (function (_super) {
    __extends(EarthObserver, _super);
    function EarthObserver(long, lat, date) {
        var _this = _super.call(this, strings.earth, "Earth", long, lat, date) || this;
        _this.orbitalPeriod = 365.256363004;
        _this.siderialPeriod = 0.99726968;
        _this.fovSun = 0.008;
        _this.landscape = "Garching";
        _this.timeRateDay = 100;
        _this.dateSunsetStart = "2018-10-26T13:01:13";
        _this.dateSunsetEnd = "2019-01-21T12:00:00";
        return _this;
    }
    EarthObserver.prototype.watchSurface = function (startDate, endDate, timeRate) {
        _super.prototype.watchSurface.call(this, startDate, endDate, timeRate);
        LandscapeMgr.setCurrentLandscapeName("Garching");
        LandscapeMgr.setFlagAtmosphere(true);
        LandscapeMgr.setFlagFog(true);
        LandscapeMgr.setFlagLandscape(true);
        core.setDate(this.date, "utc");
        core.setObserverLocation(this.long, this.lat, 425, 0, "Earth Observer", "Earth");
    };
    EarthObserver.prototype.watchSeasons = function () {
        try {
            _super.prototype.watchSeasons.call(this);
            var lbTitle = LabelMgr.labelScreen(strings.seasonalChanges, 50, 50, true, 40, "#66ccff");
            var lbTime = LabelMgr.labelScreen(strings.europeAtNoon, 50, 100, true, 25, "#66ccff");
            // core.setDate(this.date, "utc");
            // core.setTimeRate(0);
            for (var i = 0; i < 365; ++i) {
                core.setDate("+1 day");
                core.wait(0.1);
            }
        }
        finally {
            LabelMgr.deleteLabel(lbTitle);
            LabelMgr.deleteLabel(lbTime);
        }
    };
    return EarthObserver;
}(PlanetaryObserver));
var MarsObserver = /** @class */ (function (_super) {
    __extends(MarsObserver, _super);
    function MarsObserver(long, lat, date) {
        var _this = _super.call(this, strings.mars, "Mars", long, lat, date) || this;
        // fov for mars + phobos + deimos
        _this.orbitalPeriod = 686.971;
        _this.siderialPeriod = 1.025957;
        _this.fovSun = 0.00678;
        _this.landscape = "Mars";
        _this.timeRateDay = 100;
        _this.dateSunsetStart = "2018-10-26T13:01:13";
        _this.dateSunsetEnd = "2019-01-21T12:00:00";
        return _this;
    }
    MarsObserver.prototype.watchSurface = function (startDate, endDate, timeRate) {
        _super.prototype.watchSurface.call(this, startDate, endDate, timeRate);
        LandscapeMgr.setCurrentLandscapeName("Mars");
        LandscapeMgr.setFlagAtmosphere(true);
        LandscapeMgr.setFlagFog(true);
        LandscapeMgr.setFlagLandscape(true);
        core.setDate(this.date, "utc");
        core.setObserverLocation(this.long, this.lat, 425, 0, "Mars Observer", "Mars");
    };
    return MarsObserver;
}(PlanetaryObserver));
function main() {
    try {
        core.wait(2);
        Helper_1.Helper.installDebugHooks();
        setup();
        //intro(5);
        var planets = [
            new MercuryObserver(-33.22, 19.13, "2018-10-20T12:00:00"),
            new VenusObserver(-33.22, 19.13, "1997-07-29T23:35:00"),
            new EarthObserver(13, 51, "2018-06-21T12:00:00"),
        ];
        var p = planets[1];
        //p.watchSeasons();
        var rate = p.timeRateDay;
        var startDate = p.dateSunsetStart;
        var endDate = p.dateSunsetEnd;
        p.watchSeasons();
        p.watchSurface(startDate, endDate, rate);
        /*
                for (var i=0; i<planets.length; ++i) {
                     var p = planets[i];
                     if (p==null)
                         continue;
        
                //     p.watchFromSun();
                //     core.wait(60);
        
                     p.watchSeasons();
                     core.wait(6);
                    }
        */
    }
    catch (exc) {
        core.debug(exc);
        Helper_1.Helper.showError(exc);
    }
    finally {
        core.setGuiVisible(true);
        core.setTimeRate(1);
        Helper_1.Helper.removeDebugHooks();
    }
}
main();


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Strings_1 = __webpack_require__(0);
var originalDebug = core.debug;
var strings = new Strings_1.Strings().getLocalizedStrings();
exports.Helper = {
    installDebugHooks: function () {
        var osd = new OnScreenLogger(15);
        var betterDebug = function (msg) {
            if (msg instanceof Error) {
                osd.addLine(msg.toString(), "#ff3333");
            }
            else {
                //                osd.addLine(msg.toString(), "#66ccff");
                osd.addLine(msg.toString(), "#66ffcc");
            }
            originalDebug(msg);
        };
        core.debug = betterDebug;
    },
    removeDebugHooks: function () {
        if (originalDebug != null) {
            core.debug = originalDebug;
        }
        core.debug("Debug Hooks removed!");
    },
    restoreState: function (o) {
        // todo: restore state of public getters
    },
    storeState: function (o) {
        // todo: store state of public getters
    },
    showError: function (err) {
        var x = 100;
        var y = 100;
        var labelTitle = LabelMgr.labelScreen(strings.anErrorOccured, x, y, true, 50, "#ff3333");
        LabelMgr.setLabelShow(labelTitle, true);
        var labelTitle = LabelMgr.labelScreen(err.message, x, y + 70, true, 40, "#ff3333");
        LabelMgr.setLabelShow(labelTitle, true);
    },
    showTitle: function (title, subTitle, x, y) {
        core.debug(title);
        core.debug(subTitle);
        var labelTitle = LabelMgr.labelScreen(title, x, y, true, 70, "#66ccff");
        LabelMgr.setLabelShow(labelTitle, true);
        var labelTitle = LabelMgr.labelScreen(subTitle, x, y + 100, true, 40, "#66ccff");
        LabelMgr.setLabelShow(labelTitle, true);
    }
};
// A class to create an on screen console using with Stellarium Labels
var OnScreenLogger = /** @class */ (function () {
    function OnScreenLogger(numLines) {
        // An array of stellarium labels serving as a circular buffer
        this._labelHandle = [];
        this._labelContent = [];
        this._labelColor = [];
        // X-Position of the log output
        this._xp = 70;
        // Output text font size
        this._fs = 15;
        // Line Margin
        this._margin = 5;
        for (var i = 0; i < numLines; ++i) {
            this._labelContent.push("");
            this._labelColor.push("");
        }
    }
    OnScreenLogger.prototype.addLine = function (msg, color) {
        if (color === void 0) { color = "#66ccff"; }
        for (var i = this._labelContent.length - 2; i >= 0; --i) {
            this._labelContent[i + 1] = this._labelContent[i];
            this._labelColor[i + 1] = this._labelColor[i];
        }
        this._labelContent[0] = msg;
        this._labelColor[0] = color;
        // delete old labels
        for (var i = 0; i < this._labelHandle.length; ++i) {
            var lb = this._labelHandle[i];
            LabelMgr.deleteLabel(lb);
        }
        // Recreate labels
        for (var i = 0; i < this._labelContent.length; ++i) {
            var xp = this._xp;
            var yp = core.getScreenHeight() - 150 - i * (this._fs + this._margin);
            //            let lb : number = LabelMgr.labelScreen(this._labelContent[i] + "(" + this._labelContent.length.toString() + ";" + this._labelHandle.length.toString() + ")", xp, yp, true, this._fs, "#66ccff");
            var msg_1 = this._labelContent[i];
            if (msg_1)
                msg_1 = "> " + msg_1;
            this._labelHandle[i] = LabelMgr.labelScreen(msg_1, xp, yp, true, this._fs, this._labelColor[i]);
        }
    };
    return OnScreenLogger;
}());
;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Trace = /** @class */ (function () {
    function Trace() {
        this._trace = [];
        this._symbol = ".";
    }
    Trace.prototype.add = function (x, y, color) {
        if (color === void 0) { color = "#ffffff"; }
        var lb = LabelMgr.labelScreen(this._symbol, x, y, true, 10, color);
        this._trace.push(lb);
    };
    Trace.prototype.setSymbol = function (s) {
        if (!s)
            return;
        this._symbol = s;
    };
    Trace.prototype.changeSymbol = function (symbol) {
        for (var i = 0; i < this._trace.length; ++i) {
            var id = this._trace[i];
            LabelMgr.setLabelText(id, symbol);
        }
    };
    Trace.prototype.clear = function () {
        for (var i = 0; i < this._trace.length; ++i) {
            var id = this._trace[i];
            LabelMgr.deleteLabel(id);
        }
        this._trace = new Array();
    };
    return Trace;
}());
exports.Trace = Trace;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var BulletList = /** @class */ (function () {
    function BulletList() {
        this.clear();
        this._x = 100;
        this._y = 100;
        this._fs = 25;
        this._color = "#66ccff";
    }
    BulletList.prototype.clear = function () {
        this._messages = [];
        this._times = [];
        if (this._labels != null && this._labels.length > 0) {
            for (var i = 0; i < this._labels.length; ++i) {
                LabelMgr.deleteLabel(this._labels[i]);
            }
        }
        this._labels = [];
    };
    BulletList.prototype.setColor = function (color) {
        this._color = color;
    };
    BulletList.prototype.setPos = function (x, y) {
        this._x = x;
        this._y = y;
    };
    BulletList.prototype.add = function (line, delay) {
        this._messages.push(line);
        this._times.push(delay);
    };
    BulletList.prototype.show = function () {
        if (this._messages.length != this._times.length)
            throw new Error("Array length mismatch!");
        var list = [];
        try {
            for (var i = 0; i < this._messages.length; ++i) {
                var line = this._messages[i];
                var x = this._x;
                var y = this._y;
                var lb = LabelMgr.labelScreen(line, x, y + ((this._fs + 6) * i), true, this._fs, this._color, false);
                core.wait(this._times[i]);
                list.push(lb);
            }
        }
        finally {
            this._labels = list;
        }
    };
    return BulletList;
}());
exports.BulletList = BulletList;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Creates a class for creating the german texts for this script
Object.defineProperty(exports, "__esModule", { value: true });
var Strings = /** @class */ (function () {
    function Strings() {
        this._german = {
            title: "Die inneren Planeten",
            subTitle: "Eine Tour durchs Sonnensystem",
            sun: "Sonne",
            mercury: "Merkur",
            venus: "Venus",
            earth: "Erde",
            mars: "Mars",
            saturn: "Saturn",
            jupiter: "Jupiter",
            uranus: "Uranus",
            neptun: "Neptun",
            pluto: "Pluto",
            asSeenFromSun: " von der Sonne aus gesehen",
            timeLapse: "Zeitraffer",
            europeAtNoon: "Europa zur Mittagszeit",
            seasonalChanges: "Jahreszeitenwechsel",
            orbitOfXXX: "Orbit des Planeten ",
            aDayOnMercury: "Ein Tag auf dem Merkur",
            mercuryAsSeenFromSun: "Merkur von der Sonne aus gesehen",
            mercuryInfo1: "* Merkur ist der sonnennÃ¤chste Planet",
            mercuryInfo2: "* Er hat den exzentrischsten Orbit aller Planeten.",
            mercuryInfo3: "* Er hat eine 3:2 Spin-Orbit-Resonanz:",
            mercuryInfo4: "     - Er benÃ¶tigt 88 Tage fÃ¼r einen Sonnenumlauf",
            mercuryInfo5: "     - Er benÃ¶tigt 58.7 Tage fÃ¼r eine Rotation um seine Achse",
            venusAsSeenFromSun: "Venus von der Sonne aus gesehen",
        };
        this._english = {
            title: "Inner Planets",
            subTitle: "A tour through the Solar system",
            sun: "Sun",
            mercury: "Mercury",
            venus: "Venus",
            earth: "Earth",
            mars: "Mars",
            saturn: "Saturn",
            jupiter: "Jupiter",
            uranus: "Uranus",
            neptun: "Neptun",
            pluto: "Pluto",
            asSeenFromSun: " as seen from the sun",
            timeLapse: "Timelapse",
            europeAtNoon: "Europe at noon",
            seasonalChanges: "Seasonal changes",
            orbitOfXXX: "Orbit of ",
            aDayOnMercury: "A day on mercury",
            mercuryAsSeenFromSun: "Mercury as seen from sun",
            mercuryInfo1: "* Mercury is the planet closest to sun",
            mercuryInfo2: "* It has the most excentric orbit of all planets.",
            mercuryInfo3: "* It is tidally locked to the sun in a 3:2 spin-orbit resonance:",
            mercuryInfo4: "     - It takes 88 days to orbit sun",
            mercuryInfo5: "     - It takes 58.7 days to revolve around its axis",
            venusAsSeenFromSun: "Venus as seen from the sun",
        };
    }
    Strings.prototype.getLocalizedStrings = function (loc) {
        if (loc === void 0) { loc = ""; }
        // This function is using the localized name of the sun in order to try to determine the UI culture.
        var lang;
        if (loc) {
            lang = loc;
            core.debug('Forcing language to "' + lang + '"');
        }
        else {
            lang = core.getAppLanguage();
            core.debug('App language is "' + lang + '"');
        }
        var s;
        // Germany, Austria and Switzerland get the german strings. 		
        if (lang == "de_DE" || lang == "de_AT" || lang == "de_CH") {
            s = this._german;
        }
        // default is english
        else {
            s = this._english;
        }
        // Add support functions
        s.monthFromInt = function (m) {
            if (m < 1 || m > 12)
                return "invalid month";
            var monthNames = [s.january, s.february, s.march,
                s.april, s.may, s.june,
                s.july, s.august, s.september,
                s.october, s.november, s.december];
            return monthNames[m - 1];
        };
        return s;
    };
    return Strings;
}());
exports.Strings = Strings;


/***/ })
/******/ ]);