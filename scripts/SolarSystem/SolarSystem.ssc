/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// Author: Ingo Berg
// Version: 1.0
// License: GPL v3.0
// Name: Tour of the solar system
// Description: A tour through the solar system
var Helper_1 = __webpack_require__(1);
var Strings_1 = __webpack_require__(2);
var strings = new Strings_1.Strings().getLocalizedStrings();
function setup() {
    // Wait to work around #491 
    // (https://github.com/Stellarium/stellarium/issues?q=is%3Aissue+is%3Aclosed)
    core.wait(2);
    SolarSystem.setFlagPlanets(true);
    SolarSystem.setMoonScale(6);
    SolarSystem.setFlagMoonScale(true);
    SolarSystem.setFontSize(25);
    StelSkyDrawer.setAbsoluteStarScale(1.0);
    StelSkyDrawer.setRelativeStarScale(1.1);
    StarMgr.setFontSize(20);
    StarMgr.setLabelsAmount(3);
    StelMovementMgr.setAutoMoveDuration(5);
    ConstellationMgr.setFlagLines(false);
    ConstellationMgr.setFlagLabels(false);
    ConstellationMgr.setArtIntensity(0.3);
    ConstellationMgr.setFlagArt(false);
    ConstellationMgr.setFlagBoundaries(false);
    ConstellationMgr.setConstellationLineThickness(2);
    ConstellationMgr.setFontSize(32);
    ConstellationMgr.setFlagConstellationPick(true);
    ConstellationMgr.setFlagIsolateSelected(true);
    SporadicMeteorMgr.setFlagShow(true);
    SporadicMeteorMgr.setZHR(20000);
    core.setGuiVisible(false);
    core.setMilkyWayVisible(true);
    core.setMilkyWayIntensity(1);
    LandscapeMgr.setFlagAtmosphere(false);
    LandscapeMgr.setFlagLandscape(false);
}
function intro(delayTime) {
    core.setDate("2492-05-06T20:00:00", "utc");
    core.setTimeRate(500);
    StarMgr.setLabelsAmount(0);
    SolarSystem.setFlagLabels(false);
    core.debug(strings.title);
    core.debug(strings.subTitle);
    var baseY = 200;
    var labelTitle = LabelMgr.labelScreen(strings.title, 800, baseY, true, 70, "#66ccff");
    LabelMgr.setLabelShow(labelTitle, true);
    var labelTitle = LabelMgr.labelScreen(strings.subTitle, 800, baseY + 100, true, 40, "#66ccff");
    LabelMgr.setLabelShow(labelTitle, true);
    core.moveToAltAzi(10, 270);
    var baseScale = 0.4;
    var imgHeight;
    var margin = 50;
    var x = 800;
    ScreenImageMgr.createScreenImage("imgSun", "./SolarSystem.Assets/sun.png", 0, 0, 0.7);
    var planets = ["mercury", "venus", "earth", "mars"];
    var scales = [4879.4 / 12756.32, 12103.6 / 12756.32, 1, 6792.4 / 12756.32];
    for (var i = 0; i < planets.length; ++i) {
        var planet = planets[i];
        var scale = scales[i];
        ScreenImageMgr.createScreenImage(planet, "./SolarSystem.Assets/" + planet + ".png", 0, 0, baseScale * scale, false);
        imgHeight = ScreenImageMgr.getImageWidth(planet);
        //core.debug("imageHeight=" + imgHeight + "; x=" + x + "; y=" + (baseY - imgHeight / 2));
        ScreenImageMgr.setImageXY(planet, x, baseY + 400 - imgHeight / 2);
        ScreenImageMgr.showImage(planet, true);
        x += imgHeight + margin;
    }
    core.wait(delayTime);
    core.setTimeRate(1);
    LabelMgr.deleteAllLabels();
    ScreenImageMgr.deleteAllImages();
}
var PlanetaryObserver = /** @class */ (function () {
    function PlanetaryObserver(name, long, lat, date) {
        this._long = long;
        this._lat = lat;
        this._date = date;
        this._name = name;
    }
    Object.defineProperty(PlanetaryObserver.prototype, "name", {
        get: function () {
            return this._name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlanetaryObserver.prototype, "long", {
        get: function () {
            return this._long;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlanetaryObserver.prototype, "lat", {
        get: function () {
            return this._lat;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlanetaryObserver.prototype, "date", {
        get: function () {
            return this._date;
        },
        enumerable: true,
        configurable: true
    });
    PlanetaryObserver.prototype.watchSurface = function () {
        core.debug("Setting up " + this._name + " surface observer");
    };
    PlanetaryObserver.prototype.watchFromSun = function () {
        core.debug("Setting up " + this._name + " sun observer");
        this.select();
    };
    PlanetaryObserver.prototype.select = function () {
        core.debug("Selecting object " + this.name);
        core.selectObjectByName(this.name);
    };
    return PlanetaryObserver;
}());
var MercuryObserver = /** @class */ (function (_super) {
    __extends(MercuryObserver, _super);
    function MercuryObserver(long, lat, date) {
        return _super.call(this, "Mercury", long, lat, date) || this;
    }
    MercuryObserver.prototype.watchSurface = function () {
        _super.prototype.watchSurface.call(this);
        LandscapeMgr.setFlagAtmosphere(true);
        LandscapeMgr.setCurrentLandscapeName("Moon");
        LandscapeMgr.setFlagLandscapeUseMinimalBrightness(true);
        LandscapeMgr.setDefaultMinimalBrightness(0.05);
        core.setDate(this.date, "utc");
        core.setObserverLocation(this.long, this.lat, 425, 0, "Surface Mercury Observer", "Mercury");
    };
    MercuryObserver.prototype.watchFromSun = function () {
        _super.prototype.watchFromSun.call(this);
        LandscapeMgr.setFlagAtmosphere(false);
        LandscapeMgr.setFlagLandscape(false);
        core.setDate(this.date, "utc");
        core.setObserverLocation(this.long, this.lat, 425, 0, "Solar Mercury Observer", "Sun");
    };
    return MercuryObserver;
}(PlanetaryObserver));
var EarthObserver = /** @class */ (function (_super) {
    __extends(EarthObserver, _super);
    function EarthObserver(long, lat, date) {
        return _super.call(this, "Earth", long, lat, date) || this;
    }
    EarthObserver.prototype.watchSurface = function () {
        _super.prototype.watchSurface.call(this);
        LandscapeMgr.setFlagAtmosphere(true);
        LandscapeMgr.setCurrentLandscapeName("Garching");
        core.setDate(this.date, "utc");
        core.setObserverLocation(this.long, this.lat, 425, 0, "Earth Observer", "Earth");
    };
    EarthObserver.prototype.watchFromSun = function () {
        _super.prototype.watchFromSun.call(this);
    };
    return EarthObserver;
}(PlanetaryObserver));
var MarsObserver = /** @class */ (function (_super) {
    __extends(MarsObserver, _super);
    function MarsObserver(long, lat, date) {
        return _super.call(this, "Mars", long, lat, date) || this;
    }
    MarsObserver.prototype.watchSurface = function () {
        _super.prototype.watchSurface.call(this);
        LandscapeMgr.setFlagAtmosphere(true);
        LandscapeMgr.setCurrentLandscapeName("Mars");
        core.setDate(this.date, "utc");
        core.setObserverLocation(this.long, this.lat, 425, 0, "Mars Observer", "Mars");
    };
    MarsObserver.prototype.watchFromSun = function () {
        _super.prototype.watchFromSun.call(this);
    };
    return MarsObserver;
}(PlanetaryObserver));
var SaturnObserver = /** @class */ (function (_super) {
    __extends(SaturnObserver, _super);
    function SaturnObserver(long, lat, date) {
        return _super.call(this, "Saturn", long, lat, date) || this;
    }
    SaturnObserver.prototype.watchSurface = function () {
        _super.prototype.watchSurface.call(this);
        LandscapeMgr.setFlagAtmosphere(true);
        LandscapeMgr.setCurrentLandscapeName("Saturn");
        core.setDate(this.date, "utc");
        core.setObserverLocation(this.long, this.lat, 425, 0, "Saturn Observer", "Saturn");
    };
    SaturnObserver.prototype.watchFromSun = function () {
        _super.prototype.watchFromSun.call(this);
    };
    return SaturnObserver;
}(PlanetaryObserver));
var JupiterObserver = /** @class */ (function (_super) {
    __extends(JupiterObserver, _super);
    function JupiterObserver(long, lat, date) {
        return _super.call(this, "Jupiter", long, lat, date) || this;
    }
    JupiterObserver.prototype.watchSurface = function () {
        _super.prototype.watchSurface.call(this);
        LandscapeMgr.setFlagAtmosphere(true);
        LandscapeMgr.setCurrentLandscapeName("Jupiter");
        core.setDate(this.date, "utc");
        core.setObserverLocation(this.long, this.lat, 425, 0, "Jupiter Observer", "Jupiter");
    };
    JupiterObserver.prototype.watchFromSun = function () {
        _super.prototype.watchFromSun.call(this);
    };
    return JupiterObserver;
}(PlanetaryObserver));
var NeptunObserver = /** @class */ (function (_super) {
    __extends(NeptunObserver, _super);
    function NeptunObserver(long, lat, date) {
        return _super.call(this, "Neptun", long, lat, date) || this;
    }
    NeptunObserver.prototype.watchSurface = function () {
        _super.prototype.watchSurface.call(this);
        LandscapeMgr.setFlagAtmosphere(true);
        LandscapeMgr.setCurrentLandscapeName("Neptun");
        core.setDate(this.date, "utc");
        core.setObserverLocation(this.long, this.lat, 425, 0, "Neptun Observer", "Neptun");
    };
    NeptunObserver.prototype.watchFromSun = function () {
        _super.prototype.watchFromSun.call(this);
    };
    return NeptunObserver;
}(PlanetaryObserver));
function main() {
    try {
        core.wait(2);
        Helper_1.Helper.InstallDebugHooks();
        setup();
        intro(5);
        var mercury = new MercuryObserver(-33.22, 19.13, "1997-07-29T23:35:00");
        mercury.watchSurface();
        core.wait(5);
        mercury.watchFromSun();
        // var mars : PlanetaryObserver = new MarsObserver(-33.22, 19.13, "1997-07-29T23:35:00");
        // mars.setup();
        // var saturn : PlanetaryObserver = new SaturnObserver(-33.22, 19.13, "1997-07-29T23:35:00");
        // saturn.setup();
        // var jupiter : PlanetaryObserver = new JupiterObserver(-33.22, 19.13, "1997-07-29T23:35:00");
        // jupiter.setup();
    }
    catch (exc) {
        core.debug(exc);
    }
    finally {
        Helper_1.Helper.RemoveDebugHooks();
        core.setTimeRate(0);
    }
}
main();


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var originalDebug = core.debug;
exports.Helper = {
    InstallDebugHooks: function () {
        var osd = new OnScreenLogger(15);
        var betterDebug = function (msg) {
            osd.addLine(msg);
            originalDebug(msg);
        };
        core.debug = betterDebug;
    },
    RemoveDebugHooks: function () {
        if (originalDebug != null) {
            core.debug = originalDebug;
        }
        core.debug("Debug Hooks removed!");
    }
};
// A class to create an on screen console using with Stellarium Labels
var OnScreenLogger = /** @class */ (function () {
    function OnScreenLogger(numLines) {
        // X-Position of the log output
        this._xp = 70;
        // Output text font size
        this._fs = 15;
        // Line Margin
        this._margin = 5;
        this._labelHandle = [];
        this._labelContent = [];
        for (var i = 0; i < numLines; ++i) {
            this._labelContent.push("");
        }
    }
    OnScreenLogger.prototype.addLine = function (msg) {
        for (var i = this._labelContent.length - 2; i >= 0; --i) {
            this._labelContent[i + 1] = this._labelContent[i];
        }
        this._labelContent[0] = msg;
        // delete old labels
        for (var i = 0; i < this._labelHandle.length; ++i) {
            var lb = this._labelHandle[i];
            LabelMgr.deleteLabel(lb);
        }
        // Recreate labels
        for (var i = 0; i < this._labelContent.length; ++i) {
            var xp = this._xp;
            var yp = core.getScreenHeight() - 150 - i * (this._fs + this._margin);
            //            let lb : number = LabelMgr.labelScreen(this._labelContent[i] + "(" + this._labelContent.length.toString() + ";" + this._labelHandle.length.toString() + ")", xp, yp, true, this._fs, "#66ccff");
            var msg_1 = this._labelContent[i];
            if (msg_1)
                msg_1 = "> " + msg_1;
            this._labelHandle[i] = LabelMgr.labelScreen(msg_1, xp, yp, true, this._fs, "#66ccff");
        }
    };
    return OnScreenLogger;
}());
;


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Creates a class for creating the german texts for this script
Object.defineProperty(exports, "__esModule", { value: true });
var Strings = /** @class */ (function () {
    function Strings() {
        this._german = {
            title: "Die inneren Planeten",
            subTitle: "Eine Tour durchs Sonnensystem"
        };
        this._english = {
            title: "Inner Planets",
            subTitle: "A tour through the Solar system"
        };
    }
    Strings.prototype.getLocalizedStrings = function () {
        // This function is using the localized name of the sun in order to try to determine the UI culture.
        var lang = core.getAppLanguage();
        core.debug('App language is "' + lang + '"');
        var s;
        // Germany, Austria and Switzerland get the german strings. 		
        if (lang == "de_DE" || lang == "de_AT" || lang == "de_CH") {
            s = this._german;
        }
        // default is english
        else {
            s = this._english;
        }
        return s;
    };
    return Strings;
}());
exports.Strings = Strings;


/***/ })
/******/ ]);